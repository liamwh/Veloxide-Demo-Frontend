datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Above models are required for Auth.js to work
// Below models are for the domain of the application

model events {
  aggregate_type String
  aggregate_id   String
  sequence       Int      @default(autoincrement())
  event_type     String
  event_version  String
  payload        Json
  metadata       Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@id([sequence, aggregate_type, aggregate_id])
}

model account_query {
  view_id   String   @id
  version   BigInt
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
